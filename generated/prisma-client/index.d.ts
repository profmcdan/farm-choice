// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  farm: (where?: FarmWhereInput) => Promise<boolean>;
  farmer: (where?: FarmerWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  store: (where?: StoreWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  farm: (where: FarmWhereUniqueInput) => FarmPromise;
  farms: (
    args?: {
      where?: FarmWhereInput;
      orderBy?: FarmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Farm>;
  farmsConnection: (
    args?: {
      where?: FarmWhereInput;
      orderBy?: FarmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FarmConnectionPromise;
  farmer: (where: FarmerWhereUniqueInput) => FarmerPromise;
  farmers: (
    args?: {
      where?: FarmerWhereInput;
      orderBy?: FarmerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Farmer>;
  farmersConnection: (
    args?: {
      where?: FarmerWhereInput;
      orderBy?: FarmerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FarmerConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationPromise;
  locations: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Location>;
  locationsConnection: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocationConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  store: (where: StoreWhereUniqueInput) => StorePromise;
  stores: (
    args?: {
      where?: StoreWhereInput;
      orderBy?: StoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Store>;
  storesConnection: (
    args?: {
      where?: StoreWhereInput;
      orderBy?: StoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StoreConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFarm: (data: FarmCreateInput) => FarmPromise;
  updateFarm: (
    args: { data: FarmUpdateInput; where: FarmWhereUniqueInput }
  ) => FarmPromise;
  updateManyFarms: (
    args: { data: FarmUpdateManyMutationInput; where?: FarmWhereInput }
  ) => BatchPayloadPromise;
  upsertFarm: (
    args: {
      where: FarmWhereUniqueInput;
      create: FarmCreateInput;
      update: FarmUpdateInput;
    }
  ) => FarmPromise;
  deleteFarm: (where: FarmWhereUniqueInput) => FarmPromise;
  deleteManyFarms: (where?: FarmWhereInput) => BatchPayloadPromise;
  createFarmer: (data: FarmerCreateInput) => FarmerPromise;
  updateFarmer: (
    args: { data: FarmerUpdateInput; where: FarmerWhereUniqueInput }
  ) => FarmerPromise;
  updateManyFarmers: (
    args: { data: FarmerUpdateManyMutationInput; where?: FarmerWhereInput }
  ) => BatchPayloadPromise;
  upsertFarmer: (
    args: {
      where: FarmerWhereUniqueInput;
      create: FarmerCreateInput;
      update: FarmerUpdateInput;
    }
  ) => FarmerPromise;
  deleteFarmer: (where: FarmerWhereUniqueInput) => FarmerPromise;
  deleteManyFarmers: (where?: FarmerWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (
    args: { data: LocationUpdateInput; where: LocationWhereUniqueInput }
  ) => LocationPromise;
  updateManyLocations: (
    args: { data: LocationUpdateManyMutationInput; where?: LocationWhereInput }
  ) => BatchPayloadPromise;
  upsertLocation: (
    args: {
      where: LocationWhereUniqueInput;
      create: LocationCreateInput;
      update: LocationUpdateInput;
    }
  ) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createStore: (data: StoreCreateInput) => StorePromise;
  updateStore: (
    args: { data: StoreUpdateInput; where: StoreWhereUniqueInput }
  ) => StorePromise;
  updateManyStores: (
    args: { data: StoreUpdateManyMutationInput; where?: StoreWhereInput }
  ) => BatchPayloadPromise;
  upsertStore: (
    args: {
      where: StoreWhereUniqueInput;
      create: StoreCreateInput;
      update: StoreUpdateInput;
    }
  ) => StorePromise;
  deleteStore: (where: StoreWhereUniqueInput) => StorePromise;
  deleteManyStores: (where?: StoreWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  farm: (
    where?: FarmSubscriptionWhereInput
  ) => FarmSubscriptionPayloadSubscription;
  farmer: (
    where?: FarmerSubscriptionWhereInput
  ) => FarmerSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  store: (
    where?: StoreSubscriptionWhereInput
  ) => StoreSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FarmOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "size_ASC"
  | "size_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FarmerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "address_ASC"
  | "address_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface FarmerCreateOneInput {
  create?: FarmerCreateInput;
  connect?: FarmerWhereUniqueInput;
}

export type FarmWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FarmUpdateInput {
  owner?: FarmerUpdateOneInput;
  location?: LocationUpdateOneInput;
  size?: String;
}

export interface LocationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface ProductUpdateInput {
  name?: String;
  type?: String;
  quantity?: Int;
  price?: Float;
  seller?: FarmerUpdateOneInput;
  store?: StoreUpdateOneInput;
}

export interface FarmerUpdateDataInput {
  title?: String;
  firstName?: String;
  lastName?: String;
  alias?: String;
  phone?: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface StoreCreateInput {
  id?: ID_Input;
  name: String;
}

export interface FarmerUpdateOneInput {
  create?: FarmerCreateInput;
  update?: FarmerUpdateDataInput;
  upsert?: FarmerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FarmerWhereUniqueInput;
}

export type StoreWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StoreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoreWhereInput;
  AND?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
  OR?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
  NOT?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
}

export interface StoreCreateOneInput {
  create?: StoreCreateInput;
  connect?: StoreWhereUniqueInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface ProductCreateInput {
  id?: ID_Input;
  name: String;
  type: String;
  quantity: Int;
  price?: Float;
  seller?: FarmerCreateOneInput;
  store?: StoreCreateOneInput;
}

export interface FarmWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  owner?: FarmerWhereInput;
  location?: LocationWhereInput;
  size?: String;
  size_not?: String;
  size_in?: String[] | String;
  size_not_in?: String[] | String;
  size_lt?: String;
  size_lte?: String;
  size_gt?: String;
  size_gte?: String;
  size_contains?: String;
  size_not_contains?: String;
  size_starts_with?: String;
  size_not_starts_with?: String;
  size_ends_with?: String;
  size_not_ends_with?: String;
  AND?: FarmWhereInput[] | FarmWhereInput;
  OR?: FarmWhereInput[] | FarmWhereInput;
  NOT?: FarmWhereInput[] | FarmWhereInput;
}

export interface LocationUpdateManyMutationInput {
  longitude?: Float;
  latitude?: Float;
  address?: String;
}

export interface FarmSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FarmWhereInput;
  AND?: FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput;
  OR?: FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput;
  NOT?: FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput;
}

export interface LocationUpdateInput {
  longitude?: Float;
  latitude?: Float;
  address?: String;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserCreateInput {
  id?: ID_Input;
  name: String;
  email: String;
  password: String;
  phone: String;
  image: String;
}

export interface FarmerUpdateManyMutationInput {
  title?: String;
  firstName?: String;
  lastName?: String;
  alias?: String;
  phone?: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface StoreUpdateInput {
  name?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ProductUpdateManyMutationInput {
  name?: String;
  type?: String;
  quantity?: Int;
  price?: Float;
}

export interface FarmerUpdateInput {
  title?: String;
  firstName?: String;
  lastName?: String;
  alias?: String;
  phone?: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  seller?: FarmerWhereInput;
  store?: StoreWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface FarmUpdateManyMutationInput {
  size?: String;
}

export interface StoreUpdateDataInput {
  name?: String;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface LocationUpdateDataInput {
  longitude?: Float;
  latitude?: Float;
  address?: String;
}

export type FarmerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  image?: String;
}

export interface StoreUpdateManyMutationInput {
  name?: String;
}

export interface FarmCreateInput {
  id?: ID_Input;
  owner?: FarmerCreateOneInput;
  location?: LocationCreateOneInput;
  size?: String;
}

export interface StoreUpsertNestedInput {
  update: StoreUpdateDataInput;
  create: StoreCreateInput;
}

export interface LocationUpdateOneInput {
  create?: LocationCreateInput;
  update?: LocationUpdateDataInput;
  upsert?: LocationUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocationWhereUniqueInput;
}

export interface StoreUpdateOneInput {
  create?: StoreCreateInput;
  update?: StoreUpdateDataInput;
  upsert?: StoreUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StoreWhereUniqueInput;
}

export interface FarmerCreateInput {
  id?: ID_Input;
  title: String;
  firstName: String;
  lastName: String;
  alias: String;
  phone: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface FarmerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FarmerWhereInput;
  AND?: FarmerSubscriptionWhereInput[] | FarmerSubscriptionWhereInput;
  OR?: FarmerSubscriptionWhereInput[] | FarmerSubscriptionWhereInput;
  NOT?: FarmerSubscriptionWhereInput[] | FarmerSubscriptionWhereInput;
}

export interface FarmerUpsertNestedInput {
  update: FarmerUpdateDataInput;
  create: FarmerCreateInput;
}

export interface FarmerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  alias?: String;
  alias_not?: String;
  alias_in?: String[] | String;
  alias_not_in?: String[] | String;
  alias_lt?: String;
  alias_lte?: String;
  alias_gt?: String;
  alias_gte?: String;
  alias_contains?: String;
  alias_not_contains?: String;
  alias_starts_with?: String;
  alias_not_starts_with?: String;
  alias_ends_with?: String;
  alias_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  AND?: FarmerWhereInput[] | FarmerWhereInput;
  OR?: FarmerWhereInput[] | FarmerWhereInput;
  NOT?: FarmerWhereInput[] | FarmerWhereInput;
}

export interface LocationCreateInput {
  id?: ID_Input;
  longitude: Float;
  latitude: Float;
  address?: String;
}

export interface LocationCreateOneInput {
  create?: LocationCreateInput;
  connect?: LocationWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  phone?: String;
  image?: String;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface StoreWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: StoreWhereInput[] | StoreWhereInput;
  OR?: StoreWhereInput[] | StoreWhereInput;
  NOT?: StoreWhereInput[] | StoreWhereInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  phone: String;
  image: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface FarmConnection {
  pageInfo: PageInfo;
  edges: FarmEdge[];
}

export interface FarmConnectionPromise
  extends Promise<FarmConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FarmEdge>>() => T;
  aggregate: <T = AggregateFarmPromise>() => T;
}

export interface FarmConnectionSubscription
  extends Promise<AsyncIterator<FarmConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FarmEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFarmSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StoreSubscriptionPayload {
  mutation: MutationType;
  node: Store;
  updatedFields: String[];
  previousValues: StorePreviousValues;
}

export interface StoreSubscriptionPayloadPromise
  extends Promise<StoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StorePreviousValuesPromise>() => T;
}

export interface StoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StorePreviousValuesSubscription>() => T;
}

export interface StorePreviousValues {
  id: ID_Output;
  name: String;
}

export interface StorePreviousValuesPromise
  extends Promise<StorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface StorePreviousValuesSubscription
  extends Promise<AsyncIterator<StorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateFarmer {
  count: Int;
}

export interface AggregateFarmerPromise
  extends Promise<AggregateFarmer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFarmerSubscription
  extends Promise<AsyncIterator<AggregateFarmer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Farmer {
  id: ID_Output;
  title: String;
  firstName: String;
  lastName: String;
  alias: String;
  phone: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface FarmerPromise extends Promise<Farmer>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  alias: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
}

export interface FarmerSubscription
  extends Promise<AsyncIterator<Farmer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  alias: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface FarmerEdge {
  node: Farmer;
  cursor: String;
}

export interface FarmerEdgePromise extends Promise<FarmerEdge>, Fragmentable {
  node: <T = FarmerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FarmerEdgeSubscription
  extends Promise<AsyncIterator<FarmerEdge>>,
    Fragmentable {
  node: <T = FarmerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStore {
  count: Int;
}

export interface AggregateStorePromise
  extends Promise<AggregateStore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoreSubscription
  extends Promise<AsyncIterator<AggregateStore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Farm {
  id: ID_Output;
  size?: String;
}

export interface FarmPromise extends Promise<Farm>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = FarmerPromise>() => T;
  location: <T = LocationPromise>() => T;
  size: () => Promise<String>;
}

export interface FarmSubscription
  extends Promise<AsyncIterator<Farm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = FarmerSubscription>() => T;
  location: <T = LocationSubscription>() => T;
  size: () => Promise<AsyncIterator<String>>;
}

export interface StoreConnection {
  pageInfo: PageInfo;
  edges: StoreEdge[];
}

export interface StoreConnectionPromise
  extends Promise<StoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoreEdge>>() => T;
  aggregate: <T = AggregateStorePromise>() => T;
}

export interface StoreConnectionSubscription
  extends Promise<AsyncIterator<StoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoreSubscription>() => T;
}

export interface FarmSubscriptionPayload {
  mutation: MutationType;
  node: Farm;
  updatedFields: String[];
  previousValues: FarmPreviousValues;
}

export interface FarmSubscriptionPayloadPromise
  extends Promise<FarmSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FarmPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FarmPreviousValuesPromise>() => T;
}

export interface FarmSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FarmSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FarmSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FarmPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FarmPreviousValues {
  id: ID_Output;
  size?: String;
}

export interface FarmPreviousValuesPromise
  extends Promise<FarmPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  size: () => Promise<String>;
}

export interface FarmPreviousValuesSubscription
  extends Promise<AsyncIterator<FarmPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  size: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface FarmerConnection {
  pageInfo: PageInfo;
  edges: FarmerEdge[];
}

export interface FarmerConnectionPromise
  extends Promise<FarmerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FarmerEdge>>() => T;
  aggregate: <T = AggregateFarmerPromise>() => T;
}

export interface FarmerConnectionSubscription
  extends Promise<AsyncIterator<FarmerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FarmerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFarmerSubscription>() => T;
}

export interface Store {
  id: ID_Output;
  name: String;
}

export interface StorePromise extends Promise<Store>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface StoreSubscription
  extends Promise<AsyncIterator<Store>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface FarmerSubscriptionPayload {
  mutation: MutationType;
  node: Farmer;
  updatedFields: String[];
  previousValues: FarmerPreviousValues;
}

export interface FarmerSubscriptionPayloadPromise
  extends Promise<FarmerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FarmerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FarmerPreviousValuesPromise>() => T;
}

export interface FarmerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FarmerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FarmerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FarmerPreviousValuesSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FarmerPreviousValues {
  id: ID_Output;
  title: String;
  firstName: String;
  lastName: String;
  alias: String;
  phone: String;
  email?: String;
  address?: String;
  image?: String;
}

export interface FarmerPreviousValuesPromise
  extends Promise<FarmerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  alias: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
}

export interface FarmerPreviousValuesSubscription
  extends Promise<AsyncIterator<FarmerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  alias: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateFarm {
  count: Int;
}

export interface AggregateFarmPromise
  extends Promise<AggregateFarm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFarmSubscription
  extends Promise<AsyncIterator<AggregateFarm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoreEdge {
  node: Store;
  cursor: String;
}

export interface StoreEdgePromise extends Promise<StoreEdge>, Fragmentable {
  node: <T = StorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoreEdgeSubscription
  extends Promise<AsyncIterator<StoreEdge>>,
    Fragmentable {
  node: <T = StoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Product {
  id: ID_Output;
  name: String;
  type: String;
  quantity: Int;
  price?: Float;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  seller: <T = FarmerPromise>() => T;
  store: <T = StorePromise>() => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  seller: <T = FarmerSubscription>() => T;
  store: <T = StoreSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  type: String;
  quantity: Int;
  price?: Float;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface FarmEdge {
  node: Farm;
  cursor: String;
}

export interface FarmEdgePromise extends Promise<FarmEdge>, Fragmentable {
  node: <T = FarmPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FarmEdgeSubscription
  extends Promise<AsyncIterator<FarmEdge>>,
    Fragmentable {
  node: <T = FarmSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  longitude: Float;
  latitude: Float;
  address?: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  longitude: () => Promise<Float>;
  latitude: () => Promise<Float>;
  address: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Location {
  id: ID_Output;
  longitude: Float;
  latitude: Float;
  address?: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  longitude: () => Promise<Float>;
  latitude: () => Promise<Float>;
  address: () => Promise<String>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  phone: String;
  image: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Farmer",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Farm",
    embedded: false
  },
  {
    name: "Store",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "FARM_SIZE",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
